<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>W31c0me t0 My610g</title>
    <link>https://cyzrjz.github.io/post/</link>
    <description>Recent content on W31c0me t0 My610g</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 26 May 2025 15:00:51 +0800</lastBuildDate>
    <atom:link href="https://cyzrjz.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LitCTF2025(未完成)</title>
      <link>https://cyzrjz.github.io/post/litctf2025/</link>
      <pubDate>Mon, 26 May 2025 15:00:51 +0800</pubDate>
      <guid>https://cyzrjz.github.io/post/litctf2025/</guid>
      <description>&lt;h2 id=&#34;easy_rc4&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#easy_rc4&#34;&gt;&lt;/a&gt;&#xA;easy_rc4&#xA;&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://cyzrjz.github.io/post/litctf2025/img/image.png&#34; alt=&#34;alt text&#34;&gt;&#xA;一眼&lt;code&gt;key = FenKey!!&lt;/code&gt;，提取出密文后直接在线网站解码&#xA;&lt;img src=&#34;https://cyzrjz.github.io/post/litctf2025/img/2eedfd9164d94537b02793b04d5c1193-1.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;后面还有个&lt;code&gt;xor 0x20的操作&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cyzrjz.github.io/post/litctf2025/img/image-1.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cyzrjz.github.io/post/litctf2025/img/5442ef9b27e5e9231e78133cd0598430.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;LitCTF{71bb2a06417a5306ba297ddcfce7b1b0}&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;pickle&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#pickle&#34;&gt;&lt;/a&gt;&#xA;pickle&#xA;&lt;/h2&gt;&lt;p&gt;python的Pickle反序列化，用pickletools提取字节流反汇编&lt;/p&gt;</description>
    </item>
    <item>
      <title>滴水逆向三期</title>
      <link>https://cyzrjz.github.io/post/%E6%BB%B4%E6%B0%B4%E9%80%86%E5%90%91%E4%B8%89%E6%9C%9F%E7%95%99%E6%A1%A3/</link>
      <pubDate>Wed, 21 May 2025 15:15:46 +0800</pubDate>
      <guid>https://cyzrjz.github.io/post/%E6%BB%B4%E6%B0%B4%E9%80%86%E5%90%91%E4%B8%89%E6%9C%9F%E7%95%99%E6%A1%A3/</guid>
      <description>&lt;h2 id=&#34;0x00-前言&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#0x00-%e5%89%8d%e8%a8%80&#34;&gt;&lt;/a&gt;&#xA;0x00 前言&#xA;&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://pan.baidu.com/s/1Ckc1Q6dDN50RuVJ2A2JArA?pwd=AAAA&#34;&gt;滴水三期课程&lt;/a&gt;&#xA;&lt;a href=&#34;https://cyzrjz.github.io/data/%E6%BB%B4%E6%B0%B4%E9%80%86%E5%90%91%E4%B8%89%E6%9C%9F%E8%AF%BE%E4%BB%B6.zip&#34;&gt;滴水逆向三期课件&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>DLL注入实现反截屏</title>
      <link>https://cyzrjz.github.io/post/dll%E6%B3%A8%E5%85%A5%E5%AE%9E%E7%8E%B0%E5%8F%8D%E6%88%AA%E5%B1%8F/</link>
      <pubDate>Fri, 16 May 2025 09:59:20 +0800</pubDate>
      <guid>https://cyzrjz.github.io/post/dll%E6%B3%A8%E5%85%A5%E5%AE%9E%E7%8E%B0%E5%8F%8D%E6%88%AA%E5%B1%8F/</guid>
      <description>&lt;h2 id=&#34;思路&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e6%80%9d%e8%b7%af&#34;&gt;&lt;/a&gt;&#xA;思路&#xA;&lt;/h2&gt;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;SetWindowDisplayAffinity&lt;/code&gt;函数，可以设定窗口的显示属性，只能用于调用进程拥有的窗口——否则调用会失败但不报告特定错误&lt;/li&gt;&#xA;&lt;li&gt;将&lt;code&gt;SetWindowDisplayAffinity&lt;/code&gt;封装为DLL&lt;/li&gt;&#xA;&lt;li&gt;利用注入器将DLL注入目标进程实现反截屏&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cyzrjz.github.io/post/dll%E6%B3%A8%E5%85%A5%E5%AE%9E%E7%8E%B0%E5%8F%8D%E6%88%AA%E5%B1%8F/img/image.png&#34; alt=&#34;DLL注入原理图&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Angr符号执行</title>
      <link>https://cyzrjz.github.io/post/angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/</link>
      <pubDate>Wed, 14 May 2025 20:38:19 +0800</pubDate>
      <guid>https://cyzrjz.github.io/post/angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/</guid>
      <description>&lt;h2 id=&#34;基础知识点&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86%e7%82%b9&#34;&gt;&lt;/a&gt;&#xA;基础知识点&#xA;&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://docs.angr.io/en/latest/index.html&#34;&gt;angr-documentation&lt;/a&gt;&#xA;这个文档描述已经很详细，我只做后续常用的笔记&lt;/p&gt;&#xA;&lt;h3 id=&#34;angrproject&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#angrproject&#34;&gt;&lt;/a&gt;&#xA;angr.Project&#xA;&lt;/h3&gt;&lt;p&gt;初始化一个 Project，它是 angr 的核心对象，管理整个二进制分析流程&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;加载二进制文件&lt;/strong&gt;：解析 ELF（或 PE、Mach-O 等格式），建立基础结构。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;反汇编（可选）&lt;/strong&gt;：构建控制流图（CFG）或加载符号表。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;加载函数、段落、地址空间等&lt;/strong&gt;：为后续分析提供基础。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;自动加载库（默认开启）&lt;/strong&gt;：比如 libc.so，除非你传了 auto_load_libs=False&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;factory&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#factory&#34;&gt;&lt;/a&gt;&#xA;.factory&#xA;&lt;/h3&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;blank_state()&lt;/strong&gt;：创建一个空的状态，可以用来作为初始状态，没有前置执行（手动设置寄存器、内存）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;project&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;factory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;blank_state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x400000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建一个空状态（不执行 main），可以手动设置寄存器、栈、内存。适合特定函数分析或构造特殊状态&lt;/p&gt;</description>
    </item>
    <item>
      <title>链表(未完成)</title>
      <link>https://cyzrjz.github.io/post/%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Sun, 04 May 2025 18:15:53 +0800</pubDate>
      <guid>https://cyzrjz.github.io/post/%E9%93%BE%E8%A1%A8/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%89%8d%e8%a8%80&#34;&gt;&lt;/a&gt;&#xA;前言&#xA;&lt;/h2&gt;&lt;p&gt;本篇主要是对链表的内存结构进行学习，可能会进入长时间待机状态，可以先不看，等过一段时间的补充&lt;/p&gt;&#xA;&lt;h2 id=&#34;什么是链表&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af%e9%93%be%e8%a1%a8&#34;&gt;&lt;/a&gt;&#xA;什么是链表？&#xA;&lt;/h2&gt;&lt;p&gt;在计算机科学中，链表是一种重要的动态数据结构，它由一系列节点（每个节点包含数据域和指针域）通过指针串联而成，适用于频繁插入和删除操作且无需事先分配连续内存空间。与数组相比，链表在任意位置的插入与删除可在 O(1) 时间内完成（给定指针时），而数组通常需 O(n) 的元素移动开销。链表广泛应用于实现栈、队列、图的邻接表、操作系统的内存管理和任务调度等场景。但链表也有随机访问效率低（访问第 i 项需 O(n)）和额外指针空间开销的缺点，因此在需要高效索引或缓存友好时，数组更具优势&#xA;&lt;strong&gt;链表每新增或删除一个节点，仅需调整相关指针，无须像数组那样移动大量元素&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>SSE指令集学习</title>
      <link>https://cyzrjz.github.io/post/sse%E6%8C%87%E4%BB%A4%E9%9B%86%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Mon, 28 Apr 2025 23:42:20 +0800</pubDate>
      <guid>https://cyzrjz.github.io/post/sse%E6%8C%87%E4%BB%A4%E9%9B%86%E5%AD%A6%E4%B9%A0/</guid>
      <description>&lt;h2 id=&#34;sse&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#sse&#34;&gt;&lt;/a&gt;&#xA;SSE&#xA;&lt;/h2&gt;&lt;h3 id=&#34;数据类型&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b&#34;&gt;&lt;/a&gt;&#xA;数据类型&#xA;&lt;/h3&gt;&lt;p&gt;SSE提供了以下新的数据类型：&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Technology&lt;/th&gt;&#xA;          &lt;th&gt;_m64&lt;/th&gt;&#xA;          &lt;th&gt;_m128&lt;/th&gt;&#xA;          &lt;th&gt;_m128d&lt;/th&gt;&#xA;          &lt;th&gt;_m128i&lt;/th&gt;&#xA;          &lt;th&gt;_m256&lt;/th&gt;&#xA;          &lt;th&gt;_m256d&lt;/th&gt;&#xA;          &lt;th&gt;_m256i&lt;/th&gt;&#xA;          &lt;th&gt;_m512&lt;/th&gt;&#xA;          &lt;th&gt;_m512d&lt;/th&gt;&#xA;          &lt;th&gt;_m512i&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Intel® MMX™ Technology Intrinsics&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Intel® Streaming SIMD Extensions Intrinsics&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Intel® Streaming SIMD Extensions 2 Intrinsics&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Intel® Streaming SIMD Extensions 3 Intrinsics&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Advanced Encryption Standard Intrinsics + Carry-less Multiplication Intrinsic&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Half-Float Intrinsics&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Intel® Advanced Vector Extensions Intrinsics&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;          &lt;td&gt;NA&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Intel® Advanced Vector Extensions 512 Intrinsics&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;__m128i: 128位整型向量，可以容纳 16 个 8 位、8 个 16 位、4 个 32 位或 2 个 64 位整数值&lt;/li&gt;&#xA;&lt;li&gt;__m128d: 128位浮点型向量&lt;/li&gt;&#xA;&lt;li&gt;__m128: 容纳四个32位浮点值&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;对于&lt;code&gt;__m128d&lt;/code&gt;和&lt;code&gt;__m128i&lt;/code&gt;，编译器自动把局部和全局变量在栈上对齐16字节。若需要对齐&lt;code&gt;整型&lt;/code&gt;、&lt;code&gt;float&lt;/code&gt;和&lt;code&gt;double&lt;/code&gt;数组，使用&lt;code&gt;__declspec(align)&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>攻防世界 Pwn</title>
      <link>https://cyzrjz.github.io/post/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-pwn/</link>
      <pubDate>Fri, 25 Apr 2025 23:39:48 +0800</pubDate>
      <guid>https://cyzrjz.github.io/post/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-pwn/</guid>
      <description>&lt;h2 id=&#34;1-pwnstackn1&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#1-pwnstackn1&#34;&gt;&lt;/a&gt;&#xA;1. pwnstack[N1]&#xA;&lt;/h2&gt;&lt;h3 id=&#34;exp&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#exp&#34;&gt;&lt;/a&gt;&#xA;exp&#xA;&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pwn&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# r = process(&amp;#34;./pwn2&amp;#34;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;remote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;223.112.5.141&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;58471&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;back_door&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x400762&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0xA0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;back_door&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;interactive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-repeatern1&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#2-repeatern1&#34;&gt;&lt;/a&gt;&#xA;2. repeater[N1]&#xA;&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://cyzrjz.github.io/process/Pwn/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/2.zip&#34;&gt;repeater&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;分析&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%88%86%e6%9e%90&#34;&gt;&lt;/a&gt;&#xA;分析&#xA;&lt;/h3&gt;&lt;p&gt;checksec输出：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Arch:     amd64&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;RELRO:      Full RELRO &lt;span class=&#34;c1&#34;&gt;#GOT只读&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Stack:      No canary found &lt;span class=&#34;c1&#34;&gt;#栈溢出保护未开&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NX:         NX unknown - GNU_STACK missing&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;PIE:        PIE enabled &lt;span class=&#34;c1&#34;&gt;#地址随机化&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Stack:      Executable &lt;span class=&#34;c1&#34;&gt;#栈可执行&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;RWX:        Has RWX segments&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;栈可执行，大概率要写入shellcode，开启了PIE，需要泄露main函数地址&#xA;IDA查看&#xA;&lt;img src=&#34;https://cyzrjz.github.io/post/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-pwn/img/image-1.png&#34; alt=&#34;alt text&#34;&gt;&lt;img src=&#34;https://cyzrjz.github.io/post/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-pwn/img/image-2.png&#34; alt=&#34;alt text&#34;&gt;&#xA;没有后门，那就要写入shellcode然后利用栈溢出执行了&lt;/p&gt;</description>
    </item>
    <item>
      <title>JQCTF2025(未完成)</title>
      <link>https://cyzrjz.github.io/post/jqctf2025/</link>
      <pubDate>Fri, 25 Apr 2025 20:39:56 +0800</pubDate>
      <guid>https://cyzrjz.github.io/post/jqctf2025/</guid>
      <description>&lt;h2 id=&#34;第三届京麒ctf-jqctf-2025-热身赛-re1&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e7%ac%ac%e4%b8%89%e5%b1%8a%e4%ba%ac%e9%ba%92ctf-jqctf-2025-%e7%83%ad%e8%ba%ab%e8%b5%9b-re1&#34;&gt;&lt;/a&gt;&#xA;第三届京麒CTF-JQCTF-2025-热身赛-re1&#xA;&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://cyzrjz.github.io/process/JQCTF/re/re1/re1.exe&#34;&gt;JQCTF2025-热身赛-re1&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;分析&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%88%86%e6%9e%90&#34;&gt;&lt;/a&gt;&#xA;分析&#xA;&lt;/h3&gt;&lt;p&gt;Rust逆向,头一回见,直接拖入IDA分析&lt;/p&gt;&#xA;&lt;p&gt;函数看起来都很奇怪,动态调试看看&#xA;&lt;img src=&#34;https://cyzrjz.github.io/post/jqctf2025/img/image-20.png&#34; alt=&#34;alt text&#34;&gt;&#xA;运行到这个call时，提示输入字符串，然后输入后终端输出err,说明所有的判断或加密都在这个call里，步入看看&#xA;&lt;img src=&#34;https://cyzrjz.github.io/post/jqctf2025/img/image-21.png&#34; alt=&#34;alt text&#34;&gt;&#xA;到这里再按F5反编译,就是用户函数了&lt;/p&gt;</description>
    </item>
    <item>
      <title>攻防世界 Reverse</title>
      <link>https://cyzrjz.github.io/post/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-reverse/</link>
      <pubDate>Fri, 25 Apr 2025 20:36:13 +0800</pubDate>
      <guid>https://cyzrjz.github.io/post/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-reverse/</guid>
      <description>&lt;h2 id=&#34;0x01-echo-servern3&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#0x01-echo-servern3&#34;&gt;&lt;/a&gt;&#xA;0x01 echo-server[N3]&#xA;&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://cyzrjz.github.io/process/Reverse/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/1.zip&#34;&gt;echo-server&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;分析&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%88%86%e6%9e%90&#34;&gt;&lt;/a&gt;&#xA;分析&#xA;&lt;/h3&gt;&lt;p&gt;本题主要考察花指令分析&#xA;执行程序，发现没有环境，使用下面的指令安装环境&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yay -S lib32-openssl-1.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;IDA 查看&#xA;&lt;img src=&#34;https://cyzrjz.github.io/post/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-reverse/img/image.png&#34; alt=&#34;alt text&#34;&gt;&#xA;查看反汇编&#xA;&lt;img src=&#34;https://cyzrjz.github.io/post/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-reverse/img/image-1.png&#34; alt=&#34;alt text&#34;&gt;&#xA;将爆红的 call 转为数据，可以看到有&lt;code&gt;db 0E8h&lt;/code&gt;，是常见的花指令，用 NOP 填充后重新用 IDA 打开，后续大多是这样操作&#xA;&lt;img src=&#34;https://cyzrjz.github.io/post/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-reverse/img/image-2.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>BUU-Reverse</title>
      <link>https://cyzrjz.github.io/post/buuctf-reverse/</link>
      <pubDate>Mon, 21 Apr 2025 22:42:39 +0800</pubDate>
      <guid>https://cyzrjz.github.io/post/buuctf-reverse/</guid>
      <description>&lt;h2 id=&#34;安洵杯-2019crackme&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%ae%89%e6%b4%b5%e6%9d%af-2019crackme&#34;&gt;&lt;/a&gt;&#xA;[安洵杯 2019]crackMe&#xA;&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://cyzrjz.github.io/process/%5B%E5%AE%89%E6%B4%B5%E6%9D%AF-2019%5DcrackMe/attachment.exe&#34;&gt;[安洵杯 2019]crackMe&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;分析&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%88%86%e6%9e%90&#34;&gt;&lt;/a&gt;&#xA;分析&#xA;&lt;/h3&gt;&lt;p&gt;MessageBoxW被hook跳转到了别的函数，这部分在拓展再说，先分析程序&lt;/p&gt;&#xA;&lt;p&gt;跳转到了sub_C02AB0，进行了两步操作&#xA;&lt;img src=&#34;https://cyzrjz.github.io/post/buuctf-reverse/img/image-8.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>BUUCTF Pwn</title>
      <link>https://cyzrjz.github.io/post/buuctf-pwn/</link>
      <pubDate>Sun, 20 Apr 2025 22:53:15 +0800</pubDate>
      <guid>https://cyzrjz.github.io/post/buuctf-pwn/</guid>
      <description>&lt;h2 id=&#34;harekazectf2019baby_rop&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#harekazectf2019baby_rop&#34;&gt;&lt;/a&gt;&#xA;[HarekazeCTF2019]baby_rop&#xA;&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://files.buuoj.cn/files/76f9a1669c3cb299450af36b04582c04/babyrop&#34;&gt;babyrop&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;分析&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%88%86%e6%9e%90&#34;&gt;&lt;/a&gt;&#xA;分析&#xA;&lt;/h3&gt;&lt;p&gt;拖入IDA,查看main汇编代码&#xA;&lt;img src=&#34;https://cyzrjz.github.io/post/buuctf-pwn/img/image-1.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;rbp&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;rbp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;rsp&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;sub&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;rsp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;10h&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; 为堆栈开辟0x10的空间&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;command&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; &amp;#34;echo -n \&amp;#34;What&amp;#39;s your name? \&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;_system&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;lea&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;rax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rbp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;var_10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; 缓冲区开始写入位置&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;rsi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;rax&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;p__s&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; &amp;#34;%s&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;___isoc99_scanf&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; 对于scanf(&amp;#34;%s&amp;#34;, buf)这个调用,格式化字符串&amp;#39;%s&amp;#39;存储在rdi,写入地址buf存储在rsi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;lea&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;rax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rbp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;var_10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;rsi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;rax&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; &amp;#34;Welcome to the Pwn World, %s!\n&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;_printf&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;leave&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;retn&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;shift+F12查看字符串可以找到有&amp;rsquo;/bin/sh&amp;rsquo;,地址为0x601048&#xA;&lt;img src=&#34;https://cyzrjz.github.io/post/buuctf-pwn/img/image-2.png&#34; alt=&#34;alt text&#34;&gt;&#xA;再找到system的调用地址(call _system)为0x4005E3&#xA;将binsh的地址pop给rdi,再调用system&#xA;先用ROPgadget找到pop rdi;ret的gadget地址为0x400683&#xA;&lt;img src=&#34;https://cyzrjz.github.io/post/buuctf-pwn/img/image-3.png&#34; alt=&#34;alt text&#34;&gt;&#xA;构造payload&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ret2syscall</title>
      <link>https://cyzrjz.github.io/post/ret2syscall/</link>
      <pubDate>Sat, 19 Apr 2025 22:06:54 +0800</pubDate>
      <guid>https://cyzrjz.github.io/post/ret2syscall/</guid>
      <description>&lt;h2 id=&#34;前置知识&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%89%8d%e7%bd%ae%e7%9f%a5%e8%af%86&#34;&gt;&lt;/a&gt;&#xA;前置知识&#xA;&lt;/h2&gt;&lt;p&gt;假设有以下程序&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shellcode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;my_puts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shellcode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;my_puts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;代码很简单,就是输出字符串&amp;quot;hello world&amp;quot;&#xA;但这一串代码在操作系统层面如何实现?&lt;/p&gt;&#xA;&lt;pre class=&#34;mermaid&#34;&gt;flowchart LR&#xA;    A[&#34;my_puts()&#34;] --&gt; B[&#34;write()&#34;] --&gt; C[&#34;sys_write()&#34;] --&gt; D[&#34;标准输出&#34;]&#xA;&lt;/pre&gt;&#xA;&lt;p&gt;my_puts()调用了动态链接库libc.so中的write()函数&#xA;write(1,&amp;amp;&amp;ldquo;hello world&amp;rdquo;,12)&#xA;write()将传入参数包装为汇编代码&lt;code&gt;[eax = 4;ebx = 1;ecx = &amp;amp;&amp;quot;hello world&amp;quot;;edx = 12;] + int 0x80;&lt;/code&gt;&#xA;&lt;strong&gt;write()函数其实就是对write系统调用的封装&lt;/strong&gt;&#xA;执行完成后才进入了内核kernel中的sys_write()函数&#xA;sys_write()函数会将字符串&amp;quot;hello world&amp;quot;写入到标准输出设备中&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ret2libc(未完成)</title>
      <link>https://cyzrjz.github.io/post/ret2libc/</link>
      <pubDate>Sat, 19 Apr 2025 14:13:28 +0800</pubDate>
      <guid>https://cyzrjz.github.io/post/ret2libc/</guid>
      <description>&lt;h2 id=&#34;前置知识&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%89%8d%e7%bd%ae%e7%9f%a5%e8%af%86&#34;&gt;&lt;/a&gt;&#xA;前置知识&#xA;&lt;/h2&gt;&lt;h3 id=&#34;re2syscall&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#re2syscall&#34;&gt;&lt;/a&gt;&#xA;re2syscall&#xA;&lt;/h3&gt;&lt;h3 id=&#34;got表和plt表&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#got%e8%a1%a8%e5%92%8cplt%e8%a1%a8&#34;&gt;&lt;/a&gt;&#xA;GOT表和PLT表&#xA;&lt;/h3&gt;&lt;ul&gt;&#xA;&lt;li&gt;GOT: Global Offset Table, 全局偏移表，包含所有需要动态链接的外部函数的地址(在第一次执行后)&lt;/li&gt;&#xA;&lt;li&gt;PLT: Procedure Link Table, 过程链接表，包含调用外部函数的跳转指令(跳转到GOT表中)，以及初始化外部调用指令(用于链接器动态绑定dl_runtime_resolve)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;延迟绑定机制&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%bb%b6%e8%bf%9f%e7%bb%91%e5%ae%9a%e6%9c%ba%e5%88%b6&#34;&gt;&lt;/a&gt;&#xA;延迟绑定机制&#xA;&lt;/h3&gt;&lt;p&gt;在 Linux 下，动态链接采用“懒绑定”（lazy binding）策略：&lt;strong&gt;编译器将对外部函数（如 foo）的调用编译进 PLT（Procedure Linkage Table） 中的伪代码，而函数真正的地址保存在 GOT（Global Offset Table） 中。首次调用时，通过 PLT0 跳入动态链接器执行符号解析（即 _dl_runtime_resolve），并将解析结果回写到 GOT 条目；后续调用则直接通过 GOT 跳转到实际函数地址，省去额外解析开销。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Z3约束求解</title>
      <link>https://cyzrjz.github.io/post/z3%E7%BA%A6%E6%9D%9F%E6%B1%82%E8%A7%A3/</link>
      <pubDate>Thu, 17 Apr 2025 18:25:19 +0800</pubDate>
      <guid>https://cyzrjz.github.io/post/z3%E7%BA%A6%E6%9D%9F%E6%B1%82%E8%A7%A3/</guid>
      <description>&lt;h2 id=&#34;z3约束求解&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#z3%e7%ba%a6%e6%9d%9f%e6%b1%82%e8%a7%a3&#34;&gt;&lt;/a&gt;&#xA;Z3约束求解&#xA;&lt;/h2&gt;&lt;p&gt;Z3是微软开源的开源软件，可以用来进行数学规划、逻辑推理、符号执行等问题的求解&#xA;常用于离散数学，逻辑学，计算机科学等领域&#xA;可以用pip安装，命令如下：&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43;进程遍历</title>
      <link>https://cyzrjz.github.io/post/c&#43;&#43;%E8%BF%9B%E7%A8%8B%E9%81%8D%E5%8E%86/</link>
      <pubDate>Wed, 16 Apr 2025 13:34:43 +0800</pubDate>
      <guid>https://cyzrjz.github.io/post/c&#43;&#43;%E8%BF%9B%E7%A8%8B%E9%81%8D%E5%8E%86/</guid>
      <description>&lt;h2 id=&#34;遍历进程&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e9%81%8d%e5%8e%86%e8%bf%9b%e7%a8%8b&#34;&gt;&lt;/a&gt;&#xA;遍历进程&#xA;&lt;/h2&gt;&lt;h3 id=&#34;1-获取系统快照&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#1-%e8%8e%b7%e5%8f%96%e7%b3%bb%e7%bb%9f%e5%bf%ab%e7%85%a7&#34;&gt;&lt;/a&gt;&#xA;1. 获取系统快照&#xA;&lt;/h3&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;CreateToolhelp32Snapshot&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;HANDLE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WINAPI&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;CreateToolhelp32Snapshot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;DWORD&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dwFlags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;DWORD&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;th32ProcessID&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;dwFlags&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;TH32CS_INHERIT&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;进程的创建者可以访问进程的子进程&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;TH32CS_SNAPALL&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;在快照中包含系统中的所有进程和线程&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;TH32CS_SNAPHEAPLIST&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;在快照中包含在th32ProcessID中指定的进程的所有的堆&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;TH32CS_SNAPMODULE&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;在快照中包含在th32ProcessID中指定的进程的所有的模块&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;TH32CS_SNAPPROCESS&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;在快照中包含系统中所有的进程&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;TH32CS_SNAPTHREAD&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;在快照中包含系统中所有的线程&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;返回值&lt;/strong&gt;&#xA;如果成功，则返回一个进程快照的句柄；如果失败，则返回INVALID_HANDLE_VALUE&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2-遍历进程信息&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#2-%e9%81%8d%e5%8e%86%e8%bf%9b%e7%a8%8b%e4%bf%a1%e6%81%af&#34;&gt;&lt;/a&gt;&#xA;2. 遍历进程信息&#xA;&lt;/h3&gt;&lt;p&gt;在调用 &lt;code&gt;CreateToolhelp32Snapshot&lt;/code&gt; 创建系统快照后，首先需要用 &lt;code&gt;Process32First&lt;/code&gt; 函数获取快照中的第一个进程信息&#xA;然后用 &lt;code&gt;Process32Next&lt;/code&gt; 函数依次获取快照中的下一个进程信息，直到没有更多的进程信息为止&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
