
[
  
  
  {
    "objectID": "1748242851",
    "permalink": "/post/litctf2025/",
    "title": "LitCTF2025",
    
    "content": " easy_rc4 分析 一眼key = FenKey!!，提取出密文后直接在线网站解码 后面还有个xor 0x20的操作\nexp LitCTF{71bb2a06417a5306ba297ddcfce7b1b0}\npickle 分析 python的Pickle反序列化，用pickletools提取字节流反汇编\nimport pickletools with open(\u0026amp;#34;challenge.pickle\u0026amp;#34;, \u0026amp;#34;rb\u0026amp;#34;) as f: data = f.read() pickletools.dis(data) 翻译后大概是这样\ndef check(user_input): raw = input(\u0026amp;#34;input your flag \u0026amp;gt; \u0026amp;#34;) flag_bytes = raw.encode() result = [] for i in range(len(encrypted_flag)): b = flag_bytes[i] ^ key_ints[i % len(key_ints)] result.append(b) if tuple(result) == encrypted_flag: print(\u0026amp;#34;Good job! You made it!\u0026amp;#34;) return True else: print(\u0026amp;#34;Nah, don\u0026amp;#39;t give up!\u0026amp;#34;) return False 提取出encrypted_flag和key_ints\nexp #include \u0026amp;lt;iostream\u0026amp;gt; #include \u0026amp;lt;cstring\u0026amp;gt; #include \u0026amp;lt;string\u0026amp;gt; void boom(const char *flag, int key) { char tmp[45] = \u0026amp;#34;\u0026amp;#34;; for(int i = 0;i \u0026amp;lt; 45;i++) { tmp[i] = flag[i] + key; } if(strstr(tmp,\u0026amp;#34;LitCTF\u0026amp;#34;) != NULL) { printf(\u0026amp;#34;%s\\n\u0026amp;#34;,tmp); } } int main() { int encrypted_flag[] = { 85, 84, 174, 227, 132, …",
    
    "date": "2025-05-26 15:00:51",
    "updated": "2025-05-26 15:00:51"
  }
  
  , 
  {
    "objectID": "1747811746",
    "permalink": "/post/%E6%BB%B4%E6%B0%B4%E9%80%86%E5%90%91%E4%B8%89%E6%9C%9F%E7%95%99%E6%A1%A3/",
    "title": "滴水逆向三期",
    
    "content": " 0x00 前言 滴水三期课程 滴水逆向三期课件\n",
    
    "date": "2025-05-21 15:15:46",
    "updated": "2025-05-21 15:15:46"
  }
  
  , 
  {
    "objectID": "1747360760",
    "permalink": "/post/dll%E6%B3%A8%E5%85%A5%E5%AE%9E%E7%8E%B0%E5%8F%8D%E6%88%AA%E5%B1%8F/",
    "title": "DLL注入实现反截屏",
    
    "content": " 思路 SetWindowDisplayAffinity函数，可以设定窗口的显示属性，只能用于调用进程拥有的窗口——否则调用会失败但不报告特定错误 将SetWindowDisplayAffinity封装为DLL 利用注入器将DLL注入目标进程实现反截屏 基础函数 DLL部分 SetWindowDisplayAffinity 语法 bool setWindowDisPlayAffility（ [in] HWND hWnd, [in] DWORD dwAffinity ); 参数 hWnd：顶级窗口的句柄。 窗口必须属于当前进程 dwAffinity：指定窗口内容的显示位置的显示相关性设置。 值 含义 WDA_NONE 对窗口的显示位置没有限制 WDA_MONITOR 窗口内容仅显示在监视器上。 在其他任何位置，窗口都会显示，其中不显示任何内容 WDA_EXCLUDEFROMCAPTURE 窗口仅显示在监视器上。 在其他任何位置，窗口根本不显示 返回值 如果函数成功，则返回TRUE;例如，在非顶级窗口上进行函数调用时，它将返回FALSE 。 要获得更多的错误信息，请调用 GetLastError\nDllMain 语法 BOOL WINAPI DllMain( _In_ HINSTANCE hinstDLL, _In_ DWORD fdwReason, _In_ LPVOID lpvReserved ); 参数\nhinstDLL: DLL 模块的句柄，值是 DLL 的基址，DLL 的 HINSTANCE 与 DLL 的 HMODULE 相同，因此可以在调用需要模块句柄的函数时使用 hinstDLL fdwReason: 指示调用 DLL 入口点函数的原因代码, 可能的值为： DLL_PROCESS_ATTACH：进程正在加载 DLL，使用这个 DLL_THREAD_ATTACH：线程正在附加到 DLL，每个新线程都触发，导致高频重复调用 DLL_THREAD_DETACH：线程正在分离 DLL DLL_PROCESS_DETACH：进程正在卸载 DLL lpvReserved: 如果DLL_PROCESS_ATTACH fdwReason，则 lpvReserved 对于动态加载为 NULL，对于静态加载为非 NULL，一般不关心这个 框架\nBOOL WINAPI …",
    
    "date": "2025-05-16 09:59:20",
    "updated": "2025-05-16 09:59:20"
  }
  
  , 
  {
    "objectID": "1747226299",
    "permalink": "/post/angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/",
    "title": "Angr符号执行",
    
    "content": " 基础知识点 angr-documentation 这个文档描述已经很详细，我只做后续常用的笔记\nangr.Project 初始化一个 Project，它是 angr 的核心对象，管理整个二进制分析流程\n加载二进制文件：解析 ELF（或 PE、Mach-O 等格式），建立基础结构。 反汇编（可选）：构建控制流图（CFG）或加载符号表。 加载函数、段落、地址空间等：为后续分析提供基础。 自动加载库（默认开启）：比如 libc.so，除非你传了 auto_load_libs=False .factory blank_state()：创建一个空的状态，可以用来作为初始状态，没有前置执行（手动设置寄存器、内存） state = project.factory.blank_state(addr=0x400000) 创建一个空状态（不执行 main），可以手动设置寄存器、栈、内存。适合特定函数分析或构造特殊状态\nentry_state()：创建一个初始状态，指向程序入口点。 state = project.factory.entry_state() 从程序入口（main 前的 _start 或 libc 初始化）开始执行。适合从程序一开始完整符号执行\ncall_state(addr, arg1, arg2, \u0026amp;hellip;) state = project.factory.call_state(0x401000, arg1, arg2) 模拟函数调用，比如分析函数 foo(arg1, arg2)，可以直接指定地址和参数。\nfull_init_state()：创建一个完整的初始状态，包括栈、内存、文件、网络等 state = project.factory.full_init_state(args=[\u0026amp;#39;./00_angr_find\u0026amp;#39;]) simulation_manager(state),simgr(state)：创建一个模拟器，用于执行程序 simgr = project.factory.simulation_manager(state) 创建状态管理器（路径探索器），可以用 .explore()、.step() 等方式调度执行路径。\n.explore() find=None：指定目标地址，探索器会在路径中找到这个地址，并停止 num_find=None：指定 …",
    
    "date": "2025-05-14 20:38:19",
    "updated": "2025-05-14 20:38:19"
  }
  
  , 
  {
    "objectID": "1745854940",
    "permalink": "/post/sse%E6%8C%87%E4%BB%A4%E9%9B%86%E5%AD%A6%E4%B9%A0/",
    "title": "SSE指令集学习",
    
    "content": " SSE 数据类型 SSE提供了以下新的数据类型：\nTechnology _m64 _m128 _m128d _m128i _m256 _m256d _m256i _m512 _m512d _m512i Intel® MMX™ Technology Intrinsics Yes NA NA NA NA NA NA NA NA NA Intel® Streaming SIMD Extensions Intrinsics Yes Yes NA NA NA NA NA NA NA NA Intel® Streaming SIMD Extensions 2 Intrinsics Yes Yes Yes Yes NA NA NA NA NA NA Intel® Streaming SIMD Extensions 3 Intrinsics Yes Yes Yes Yes NA NA NA NA NA NA Advanced Encryption Standard Intrinsics + Carry-less Multiplication Intrinsic Yes Yes Yes Yes NA NA NA NA NA NA Half-Float Intrinsics Yes Yes Yes Yes NA NA NA NA NA NA Intel® Advanced Vector Extensions Intrinsics Yes Yes Yes Yes Yes Yes Yes NA NA NA Intel® Advanced Vector Extensions 512 Intrinsics Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes __m128i: 128位整型向量，可以容纳 16 个 8 位、8 个 16 位、4 个 32 位或 2 个 64 位整数值 __m128d: 128位浮点型向量 __m128: 容纳四个32位浮点值 对于__m128d和__m128i，编译器自动把局部和全局变量在栈上对齐16字节。若需要对齐整型、float和double数组，使用__declspec(align)\n要访问8位数据 __m128i a = _mm_set1_epi8(1); // 在目标 __m128i 向量中将 每个 8-位整型元素（共 16 …",
    
    "date": "2025-04-28 23:42:20",
    "updated": "2025-04-28 23:42:20"
  }
  
  , 
  {
    "objectID": "1745584573",
    "permalink": "/post/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-reverse/",
    "title": "攻防世界 Reverse",
    
    "content": " 0x01 echo-server[N3] echo-server\n分析 本题主要考察花指令分析 执行程序，发现没有环境，使用下面的指令安装环境\nyay -S lib32-openssl-1.0 IDA 查看 查看反汇编 将爆红的 call 转为数据，可以看到有db 0E8h，是常见的花指令，用 NOP 填充后重新用 IDA 打开，后续大多是这样操作 选中第一段按下 P，注意不要选到 nop 了 可以成功反编译了，但是还有一处异常 查看反汇编窗口，这里应该是一个判断，不应该跳转到自己的开头，然后判断失败后直接执行 exit，\n结合上一段汇编代码，这里应该是上一段的接续，直接 nop 掉不应该存在的跳转指令 nop 掉后，逻辑就清晰了，再次 F5 反汇编 如图，反汇编正常了 接下来分析程序逻辑，开始动调，输入F1@gA，查看汇编代码 这里应该跳转的，但是没跳转，直接执行 exit，试试直接修改为 jmp\n输出F8C60EB40BF66919A77C4BD88D45DEF4 提交，发现这就是 flag\nexp F8C60EB40BF66919A77C4BD88D45DEF4 0x02 catch-me[N3] catch-me\n分析 拖入 IDA，查看反汇编\n从 byte_6012A8 到 dword_6012AC 占用连续的空间，猜测是同一个数组\n动调得到 v3 的值为0xB11924E1 得到 getenv(\u0026amp;quot;CTF\u0026amp;quot;) = v3 ^ 0xFEEBFEEB 猜测 getenv(\u0026amp;quot;ASIS\u0026amp;quot;) == getenv(\u0026amp;quot;CTF\u0026amp;quot;)\n中间一大堆的 SSE 指令没对 haystack 做修改，先跳过，想了解可以看\nSSE 指令集学习\n解法 1 程序通过 getenv 函数获取环境变量的值，那么直接往环境变量里写入正确的值就行了\n可以通过 export 设置临时环境变量，终端关闭后自动清除\n(通过printf可以导入十六进制整数类型，值得积累) export ASIS=\u0026amp;#34;$(printf \u0026amp;#34;\\x0a\\xda\\xf2\\x4f\u0026amp;#34;)\u0026amp;#34; #注意参数是从低位到高位的 export CTF=\u0026amp;#34;$(printf \u0026amp;#34;\\x0a\\xda\\xf2\\x4f\u0026amp;#34;)\u0026amp;#34; 解法 2 纯逆 …",
    
    "date": "2025-04-25 20:36:13",
    "updated": "2025-04-25 20:36:13"
  }
  
  , 
  {
    "objectID": "1745246559",
    "permalink": "/post/buuctf-reverse/",
    "title": "BUU-Reverse",
    
    "content": " [安洵杯 2019]crackMe [安洵杯 2019]crackMe\n分析 MessageBoxW被hook跳转到了别的函数，这部分在拓展再说，先分析程序\n跳转到了sub_C02AB0，进行了两步操作 base64表的大小写互换 注册VEH 然后回到main函数，安装了一个SEH,然后将eax清零，在地址0(eax)写入数据，触发 EXCEPTION_ACCESS_VIOLATION异常，执行异常处理 以下是Windows 用户态异常处理的四个主要阶段\nflowchart LR A[\u0026#34;触发异常\u0026#34;]--\u0026gt;B[\u0026#34;调试器\u0026#34;]--\u0026gt;C[\u0026#34;向量化异常处理(VEH)\u0026#34;]--\u0026gt;D[\u0026#34;结构化异常处理(SEH)\u0026#34;]--\u0026gt;E[\u0026#34;顶层未处理异常过滤器(UEF)\u0026#34;] 由于已经注册了VEH，所以先进入VEH处理\nVEH中进行了两步操作\n用where_are_u_now?初始化sm4加密 设置 UEF 为 TopLevelExceptionFilter SEH中对输入进行sm4加密，返回值为 1，继续进行错误处理 进入UEF(TopLevelExceptionFilter)\n对str2每两位进行置换，然后对str1进行变种base64加密 进入sub_C0126C\n这里将str1进行变种base64加密，加密算法为base64换表，base64有两处换表\n大小写互换 整个表想左移动24字符 最终表为yzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/abcdefghijklmnopqrstuvwx 最后str1和str2在sub_C01136进行对比\nexp import base64 from pysm4 import decrypt from Crypto.Util.number import long_to_bytes key = \u0026amp;#34;where_are_u_now?\u0026amp;#34; key = key.encode().hex() Str2 = \u0026amp;#34;1UTAOIkpyOSWGv/mOYFY4R==\u0026amp;#34; # !要改成= temp = list(Str2) for i in range(0,len(temp),2): temp[i],temp[i+1] = temp[i+1],temp[i] res = \u0026amp;#34;\u0026amp;#34;.join(temp) …",
    
    "date": "2025-04-21 22:42:39",
    "updated": "2025-04-21 22:42:39"
  }
  
  , 
  {
    "objectID": "1744885519",
    "permalink": "/post/z3%E7%BA%A6%E6%9D%9F%E6%B1%82%E8%A7%A3/",
    "title": "Z3约束求解",
    
    "content": " Z3约束求解 pip install z3-solver 函数介绍与使用 数据类型 数据类型 示例 解释 Bool x = Bool(\u0026amp;lsquo;x\u0026amp;rsquo;) 创建一个布尔变量x Bools x, y, z = Bools(\u0026amp;lsquo;x y z\u0026amp;rsquo;) 创建三个布尔变量x,y,z,以此类推,后面的Ints,Reals,BitVecs等都可以用这种方式创建 BitVec x = BitVec(\u0026amp;lsquo;x\u0026amp;rsquo;, 8) 创建一个8位的二进制向量变量x Int x = Int(\u0026amp;lsquo;x\u0026amp;rsquo;) 创建一个整数变量x Real x = Real(\u0026amp;lsquo;x\u0026amp;rsquo;) 创建一个实数变量x 常用函数 函数 功能 And(a, b) 逻辑与，返回a和b的逻辑与,表示同时满足a和b Or(a, b) 逻辑或，返回a和b的逻辑或,表示满足a或b Not(a) 逻辑非，返回a的逻辑非,表示不满足a Xor(a, b) 逻辑异或，返回a和b的逻辑异或,表示满足a或b，但不同时满足 If(a, b, c) 条件选择，返回a和b的条件选择，表示满足a时返回b，否则返回c Distinct(a, b, c) 不同，返回a、b、c的不同关系，表示a、b、c中没有相同的值 Sum(a, b, c) 求和，返回a、b、c的求和，表示a、b、c的和 Implies(a, b) 蕴含，返回a和b的蕴含关系，表示a成立那b必然成立，否则无所谓 PbEq([(x, 1), (y, 2), (z, 3)] , n) 伪布尔约束,x,y,z为布尔变量,1,2,3为权重,n为目标值，表示满足x*1+y*2+z*3=n 函数详解 PbEq 用于表示多个布尔变量中恰好有几个为真 s.add(PbEq([(x, 1), (y, 2), (z, 3)], 6)) # 约束条件是x*1+y*2+z*3=6 这里约束的表达式是 变量真值 * 权重 = 目标值 当所有权重为1时，表示多个目标只有一个成立 s.add(PbEq([(x, 1), (y, 1), (z, 1)], 1)) 表示条件x,y,z中只有一个为真 创建Solver对象 创建Solver对象，用于添加约束条件 Solver用来“管理”和“求解”你添加进去的逻辑约束条件 他能做三件事\n接收你的逻辑条 …",
    
    "date": "2025-04-17 18:25:19",
    "updated": "2025-04-17 18:25:19"
  }
  
  , 
  {
    "objectID": "1744781683",
    "permalink": "/post/c++%E8%BF%9B%E7%A8%8B%E9%81%8D%E5%8E%86/",
    "title": "C++进程遍历",
    
    "content": " 遍历进程 1. 获取系统快照 CreateToolhelp32Snapshot 定义 HANDLE WINAPI CreateToolhelp32Snapshot( DWORD dwFlags, DWORD th32ProcessID ); 参数 dwFlags 描述 TH32CS_INHERIT 进程的创建者可以访问进程的子进程 TH32CS_SNAPALL 在快照中包含系统中的所有进程和线程 TH32CS_SNAPHEAPLIST 在快照中包含在th32ProcessID中指定的进程的所有的堆 TH32CS_SNAPMODULE 在快照中包含在th32ProcessID中指定的进程的所有的模块 TH32CS_SNAPPROCESS 在快照中包含系统中所有的进程 TH32CS_SNAPTHREAD 在快照中包含系统中所有的线程 返回值 如果成功，则返回一个进程快照的句柄；如果失败，则返回INVALID_HANDLE_VALUE 2. 遍历进程信息 在调用 CreateToolhelp32Snapshot 创建系统快照后，首先需要用 Process32First 函数获取快照中的第一个进程信息 然后用 Process32Next 函数依次获取快照中的下一个进程信息，直到没有更多的进程信息为止\nProcess32First和Process32Next 定义 BOOL WINAPI Process32First( HANDLE hSnapshot, LPPROCESSENTRY32 lppe ); BOOL WINAPI Process32Next( HANDLE hSnapshot, LPPROCESSENTRY32 lppe ); 参数\n参数 描述 hSnapshot 进程快照的句柄 lppe 指向PROCESSENTRY32结构的指针，用于接收进程信息 返回值 如果成功，则返回TRUE；如果失败，则返回FALSE\nPROCESSENTRY32结构 PROCESSENTRY32结构用于保存有关系统中单个进程的快照信息。它定义在头文件 \u0026amp;lt;tlhelp32.h\u0026amp;gt; 中，是使用 ToolHelp32 API（如 CreateToolhelp32Snapshot、Process32First、Process32Next 等）遍历系统进程时的重要数据结构。 …",
    
    "date": "2025-04-16 13:34:43",
    "updated": "2025-04-16 13:34:43"
  }
  
]